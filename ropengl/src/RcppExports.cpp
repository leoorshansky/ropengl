// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// example
int example();
RcppExport SEXP _ropengl_example() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(example());
    return rcpp_result_gen;
END_RCPP
}
// readFile
std::string readFile(std::string name);
RcppExport SEXP _ropengl_readFile(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(readFile(name));
    return rcpp_result_gen;
END_RCPP
}
// myGlfwInit
int myGlfwInit();
RcppExport SEXP _ropengl_myGlfwInit() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(myGlfwInit());
    return rcpp_result_gen;
END_RCPP
}
// flip
void flip();
RcppExport SEXP _ropengl_flip() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    flip();
    return R_NilValue;
END_RCPP
}
// ortho
NumericMatrix ortho(float left, float right, float bottom, float top, float zNear, float zFar);
RcppExport SEXP _ropengl_ortho(SEXP leftSEXP, SEXP rightSEXP, SEXP bottomSEXP, SEXP topSEXP, SEXP zNearSEXP, SEXP zFarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type left(leftSEXP);
    Rcpp::traits::input_parameter< float >::type right(rightSEXP);
    Rcpp::traits::input_parameter< float >::type bottom(bottomSEXP);
    Rcpp::traits::input_parameter< float >::type top(topSEXP);
    Rcpp::traits::input_parameter< float >::type zNear(zNearSEXP);
    Rcpp::traits::input_parameter< float >::type zFar(zFarSEXP);
    rcpp_result_gen = Rcpp::wrap(ortho(left, right, bottom, top, zNear, zFar));
    return rcpp_result_gen;
END_RCPP
}
// perspective
NumericMatrix perspective(float fov, float aspect, float zNear, float zFar);
RcppExport SEXP _ropengl_perspective(SEXP fovSEXP, SEXP aspectSEXP, SEXP zNearSEXP, SEXP zFarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type fov(fovSEXP);
    Rcpp::traits::input_parameter< float >::type aspect(aspectSEXP);
    Rcpp::traits::input_parameter< float >::type zNear(zNearSEXP);
    Rcpp::traits::input_parameter< float >::type zFar(zFarSEXP);
    rcpp_result_gen = Rcpp::wrap(perspective(fov, aspect, zNear, zFar));
    return rcpp_result_gen;
END_RCPP
}
// frustum
NumericMatrix frustum(float left, float right, float bottom, float top, float nearVal, float farVal);
RcppExport SEXP _ropengl_frustum(SEXP leftSEXP, SEXP rightSEXP, SEXP bottomSEXP, SEXP topSEXP, SEXP nearValSEXP, SEXP farValSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type left(leftSEXP);
    Rcpp::traits::input_parameter< float >::type right(rightSEXP);
    Rcpp::traits::input_parameter< float >::type bottom(bottomSEXP);
    Rcpp::traits::input_parameter< float >::type top(topSEXP);
    Rcpp::traits::input_parameter< float >::type nearVal(nearValSEXP);
    Rcpp::traits::input_parameter< float >::type farVal(farValSEXP);
    rcpp_result_gen = Rcpp::wrap(frustum(left, right, bottom, top, nearVal, farVal));
    return rcpp_result_gen;
END_RCPP
}
// identity
NumericMatrix identity();
RcppExport SEXP _ropengl_identity() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(identity());
    return rcpp_result_gen;
END_RCPP
}
// lookAt
NumericMatrix lookAt(NumericVector eye, NumericVector center, NumericVector up);
RcppExport SEXP _ropengl_lookAt(SEXP eyeSEXP, SEXP centerSEXP, SEXP upSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type eye(eyeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type center(centerSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type up(upSEXP);
    rcpp_result_gen = Rcpp::wrap(lookAt(eye, center, up));
    return rcpp_result_gen;
END_RCPP
}
// scale
NumericMatrix scale(NumericMatrix mat, NumericVector vec);
RcppExport SEXP _ropengl_scale(SEXP matSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(scale(mat, vec));
    return rcpp_result_gen;
END_RCPP
}
// translate
NumericMatrix translate(NumericMatrix mat, NumericVector vec);
RcppExport SEXP _ropengl_translate(SEXP matSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(translate(mat, vec));
    return rcpp_result_gen;
END_RCPP
}
// rotate
NumericMatrix rotate(NumericMatrix mat, float angle, NumericVector vec);
RcppExport SEXP _ropengl_rotate(SEXP matSEXP, SEXP angleSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< float >::type angle(angleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(rotate(mat, angle, vec));
    return rcpp_result_gen;
END_RCPP
}
// normalize
NumericVector normalize(NumericVector vec);
RcppExport SEXP _ropengl_normalize(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize(vec));
    return rcpp_result_gen;
END_RCPP
}
// cross
NumericVector cross(NumericVector a, NumericVector b);
RcppExport SEXP _ropengl_cross(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(cross(a, b));
    return rcpp_result_gen;
END_RCPP
}
// getKeyId
int getKeyId(std::string name);
RcppExport SEXP _ropengl_getKeyId(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(getKeyId(name));
    return rcpp_result_gen;
END_RCPP
}
// getKeyByName
int getKeyByName(std::string name);
RcppExport SEXP _ropengl_getKeyByName(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(getKeyByName(name));
    return rcpp_result_gen;
END_RCPP
}
// myGlfwGetKeyName
std::string myGlfwGetKeyName(int id);
RcppExport SEXP _ropengl_myGlfwGetKeyName(SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlfwGetKeyName(id));
    return rcpp_result_gen;
END_RCPP
}
// getKeyById
int getKeyById(int id);
RcppExport SEXP _ropengl_getKeyById(SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(getKeyById(id));
    return rcpp_result_gen;
END_RCPP
}
// initKeyMap
void initKeyMap();
RcppExport SEXP _ropengl_initKeyMap() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    initKeyMap();
    return R_NilValue;
END_RCPP
}
// hideCursor
void hideCursor();
RcppExport SEXP _ropengl_hideCursor() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    hideCursor();
    return R_NilValue;
END_RCPP
}
// showCursor
void showCursor();
RcppExport SEXP _ropengl_showCursor() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    showCursor();
    return R_NilValue;
END_RCPP
}
// getCursorPos
std::vector<double> getCursorPos();
RcppExport SEXP _ropengl_getCursorPos() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getCursorPos());
    return rcpp_result_gen;
END_RCPP
}
// setCursorPos
void setCursorPos(double x, double y);
RcppExport SEXP _ropengl_setCursorPos(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    setCursorPos(x, y);
    return R_NilValue;
END_RCPP
}
// getMouseButtons
std::vector<int> getMouseButtons();
RcppExport SEXP _ropengl_getMouseButtons() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getMouseButtons());
    return rcpp_result_gen;
END_RCPP
}
// getScrollWheel
std::vector<double> getScrollWheel();
RcppExport SEXP _ropengl_getScrollWheel() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getScrollWheel());
    return rcpp_result_gen;
END_RCPP
}
// createWindow
void createWindow(int x, int y, const char* name, bool fullScreen);
RcppExport SEXP _ropengl_createWindow(SEXP xSEXP, SEXP ySEXP, SEXP nameSEXP, SEXP fullScreenSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< const char* >::type name(nameSEXP);
    Rcpp::traits::input_parameter< bool >::type fullScreen(fullScreenSEXP);
    createWindow(x, y, name, fullScreen);
    return R_NilValue;
END_RCPP
}
// focusWindow
void focusWindow();
RcppExport SEXP _ropengl_focusWindow() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    focusWindow();
    return R_NilValue;
END_RCPP
}
// closeWindow
void closeWindow();
RcppExport SEXP _ropengl_closeWindow() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    closeWindow();
    return R_NilValue;
END_RCPP
}
// shouldWindowClose
bool shouldWindowClose();
RcppExport SEXP _ropengl_shouldWindowClose() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(shouldWindowClose());
    return rcpp_result_gen;
END_RCPP
}
// getFlag
unsigned int getFlag(std::string a);
RcppExport SEXP _ropengl_getFlag(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(getFlag(a));
    return rcpp_result_gen;
END_RCPP
}
// getFlagsOR
unsigned int getFlagsOR(std::string a, std::string b);
RcppExport SEXP _ropengl_getFlagsOR(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type a(aSEXP);
    Rcpp::traits::input_parameter< std::string >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(getFlagsOR(a, b));
    return rcpp_result_gen;
END_RCPP
}
// myGlShaderSource
void myGlShaderSource(unsigned int shader, std::string a, int count);
RcppExport SEXP _ropengl_myGlShaderSource(SEXP shaderSEXP, SEXP aSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type shader(shaderSEXP);
    Rcpp::traits::input_parameter< std::string >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    myGlShaderSource(shader, a, count);
    return R_NilValue;
END_RCPP
}
// myGlGenVertexArrays
std::vector<int> myGlGenVertexArrays(int n);
RcppExport SEXP _ropengl_myGlGenVertexArrays(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGenVertexArrays(n));
    return rcpp_result_gen;
END_RCPP
}
// myGlDeleteVertexArrays
void myGlDeleteVertexArrays(int n, std::vector<unsigned int> arrays);
RcppExport SEXP _ropengl_myGlDeleteVertexArrays(SEXP nSEXP, SEXP arraysSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type arrays(arraysSEXP);
    myGlDeleteVertexArrays(n, arrays);
    return R_NilValue;
END_RCPP
}
// myGlBindVertexArray
void myGlBindVertexArray(unsigned int array);
RcppExport SEXP _ropengl_myGlBindVertexArray(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type array(arraySEXP);
    myGlBindVertexArray(array);
    return R_NilValue;
END_RCPP
}
// myGlActiveTexture
void myGlActiveTexture(unsigned int texture);
RcppExport SEXP _ropengl_myGlActiveTexture(SEXP textureSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type texture(textureSEXP);
    myGlActiveTexture(texture);
    return R_NilValue;
END_RCPP
}
// myGlAttachShader
void myGlAttachShader(unsigned int program, unsigned int shader);
RcppExport SEXP _ropengl_myGlAttachShader(SEXP programSEXP, SEXP shaderSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type program(programSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type shader(shaderSEXP);
    myGlAttachShader(program, shader);
    return R_NilValue;
END_RCPP
}
// myGlBindAttribLocation
void myGlBindAttribLocation(unsigned int program, unsigned int index, std::string name);
RcppExport SEXP _ropengl_myGlBindAttribLocation(SEXP programSEXP, SEXP indexSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type program(programSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    myGlBindAttribLocation(program, index, name);
    return R_NilValue;
END_RCPP
}
// myGlBindBuffer
void myGlBindBuffer(unsigned int target, unsigned int buffer);
RcppExport SEXP _ropengl_myGlBindBuffer(SEXP targetSEXP, SEXP bufferSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type buffer(bufferSEXP);
    myGlBindBuffer(target, buffer);
    return R_NilValue;
END_RCPP
}
// myGlBindFramebuffer
void myGlBindFramebuffer(unsigned int target, unsigned int framebuffer);
RcppExport SEXP _ropengl_myGlBindFramebuffer(SEXP targetSEXP, SEXP framebufferSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type framebuffer(framebufferSEXP);
    myGlBindFramebuffer(target, framebuffer);
    return R_NilValue;
END_RCPP
}
// myGlBindRenderbuffer
void myGlBindRenderbuffer(unsigned int target, unsigned int renderbuffer);
RcppExport SEXP _ropengl_myGlBindRenderbuffer(SEXP targetSEXP, SEXP renderbufferSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type renderbuffer(renderbufferSEXP);
    myGlBindRenderbuffer(target, renderbuffer);
    return R_NilValue;
END_RCPP
}
// myGlBindTexture
void myGlBindTexture(unsigned int target, unsigned int texture);
RcppExport SEXP _ropengl_myGlBindTexture(SEXP targetSEXP, SEXP textureSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type texture(textureSEXP);
    myGlBindTexture(target, texture);
    return R_NilValue;
END_RCPP
}
// myGlBlendColor
void myGlBlendColor(float red, float green, float blue, float alpha);
RcppExport SEXP _ropengl_myGlBlendColor(SEXP redSEXP, SEXP greenSEXP, SEXP blueSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type red(redSEXP);
    Rcpp::traits::input_parameter< float >::type green(greenSEXP);
    Rcpp::traits::input_parameter< float >::type blue(blueSEXP);
    Rcpp::traits::input_parameter< float >::type alpha(alphaSEXP);
    myGlBlendColor(red, green, blue, alpha);
    return R_NilValue;
END_RCPP
}
// myGlBlendEquation
void myGlBlendEquation(unsigned int mode);
RcppExport SEXP _ropengl_myGlBlendEquation(SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type mode(modeSEXP);
    myGlBlendEquation(mode);
    return R_NilValue;
END_RCPP
}
// myGlBlendEquationSeparate
void myGlBlendEquationSeparate(unsigned int modeRGB, unsigned int modeAlpha);
RcppExport SEXP _ropengl_myGlBlendEquationSeparate(SEXP modeRGBSEXP, SEXP modeAlphaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type modeRGB(modeRGBSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type modeAlpha(modeAlphaSEXP);
    myGlBlendEquationSeparate(modeRGB, modeAlpha);
    return R_NilValue;
END_RCPP
}
// myGlBlendFunc
void myGlBlendFunc(unsigned int sfactor, unsigned int dfactor);
RcppExport SEXP _ropengl_myGlBlendFunc(SEXP sfactorSEXP, SEXP dfactorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type sfactor(sfactorSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type dfactor(dfactorSEXP);
    myGlBlendFunc(sfactor, dfactor);
    return R_NilValue;
END_RCPP
}
// myGlBlendFuncSeparate
void myGlBlendFuncSeparate(unsigned int sfactorRGB, unsigned int dfactorRGB, unsigned int sfactorAlpha, unsigned int dfactorAlpha);
RcppExport SEXP _ropengl_myGlBlendFuncSeparate(SEXP sfactorRGBSEXP, SEXP dfactorRGBSEXP, SEXP sfactorAlphaSEXP, SEXP dfactorAlphaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type sfactorRGB(sfactorRGBSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type dfactorRGB(dfactorRGBSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type sfactorAlpha(sfactorAlphaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type dfactorAlpha(dfactorAlphaSEXP);
    myGlBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    return R_NilValue;
END_RCPP
}
// myGlBufferData
void myGlBufferData(unsigned int target, std::vector<float> data, unsigned int usage, bool elementArray);
RcppExport SEXP _ropengl_myGlBufferData(SEXP targetSEXP, SEXP dataSEXP, SEXP usageSEXP, SEXP elementArraySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type usage(usageSEXP);
    Rcpp::traits::input_parameter< bool >::type elementArray(elementArraySEXP);
    myGlBufferData(target, data, usage, elementArray);
    return R_NilValue;
END_RCPP
}
// myGlBufferSubData
void myGlBufferSubData(unsigned int target, long long int offset, long long int size, std::vector<float> data);
RcppExport SEXP _ropengl_myGlBufferSubData(SEXP targetSEXP, SEXP offsetSEXP, SEXP sizeSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< long long int >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< long long int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type data(dataSEXP);
    myGlBufferSubData(target, offset, size, data);
    return R_NilValue;
END_RCPP
}
// myGlCheckFramebufferStatus
unsigned int myGlCheckFramebufferStatus(unsigned int target);
RcppExport SEXP _ropengl_myGlCheckFramebufferStatus(SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlCheckFramebufferStatus(target));
    return rcpp_result_gen;
END_RCPP
}
// myGlClear
void myGlClear(unsigned int mask);
RcppExport SEXP _ropengl_myGlClear(SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type mask(maskSEXP);
    myGlClear(mask);
    return R_NilValue;
END_RCPP
}
// myGlClearColor
void myGlClearColor(float red, float green, float blue, float alpha);
RcppExport SEXP _ropengl_myGlClearColor(SEXP redSEXP, SEXP greenSEXP, SEXP blueSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type red(redSEXP);
    Rcpp::traits::input_parameter< float >::type green(greenSEXP);
    Rcpp::traits::input_parameter< float >::type blue(blueSEXP);
    Rcpp::traits::input_parameter< float >::type alpha(alphaSEXP);
    myGlClearColor(red, green, blue, alpha);
    return R_NilValue;
END_RCPP
}
// myGlClearDepthf
void myGlClearDepthf(float d);
RcppExport SEXP _ropengl_myGlClearDepthf(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type d(dSEXP);
    myGlClearDepthf(d);
    return R_NilValue;
END_RCPP
}
// myGlClearStencil
void myGlClearStencil(int s);
RcppExport SEXP _ropengl_myGlClearStencil(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    myGlClearStencil(s);
    return R_NilValue;
END_RCPP
}
// myGlColorMask
void myGlColorMask(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha);
RcppExport SEXP _ropengl_myGlColorMask(SEXP redSEXP, SEXP greenSEXP, SEXP blueSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned char >::type red(redSEXP);
    Rcpp::traits::input_parameter< unsigned char >::type green(greenSEXP);
    Rcpp::traits::input_parameter< unsigned char >::type blue(blueSEXP);
    Rcpp::traits::input_parameter< unsigned char >::type alpha(alphaSEXP);
    myGlColorMask(red, green, blue, alpha);
    return R_NilValue;
END_RCPP
}
// myGlCompileShader
void myGlCompileShader(unsigned int shader);
RcppExport SEXP _ropengl_myGlCompileShader(SEXP shaderSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type shader(shaderSEXP);
    myGlCompileShader(shader);
    return R_NilValue;
END_RCPP
}
// myGlCompressedTexImage2D
void myGlCompressedTexImage2D(unsigned int target, int level, unsigned int internalformat, int width, int height, int border, int imageSize, std::vector<float> data);
RcppExport SEXP _ropengl_myGlCompressedTexImage2D(SEXP targetSEXP, SEXP levelSEXP, SEXP internalformatSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP borderSEXP, SEXP imageSizeSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type internalformat(internalformatSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< int >::type border(borderSEXP);
    Rcpp::traits::input_parameter< int >::type imageSize(imageSizeSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type data(dataSEXP);
    myGlCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
    return R_NilValue;
END_RCPP
}
// myGlCompressedTexSubImage2D
void myGlCompressedTexSubImage2D(unsigned int target, int level, int xoffset, int yoffset, int width, int height, unsigned int format, int imageSize, std::vector<float> data);
RcppExport SEXP _ropengl_myGlCompressedTexSubImage2D(SEXP targetSEXP, SEXP levelSEXP, SEXP xoffsetSEXP, SEXP yoffsetSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP formatSEXP, SEXP imageSizeSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    Rcpp::traits::input_parameter< int >::type xoffset(xoffsetSEXP);
    Rcpp::traits::input_parameter< int >::type yoffset(yoffsetSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type format(formatSEXP);
    Rcpp::traits::input_parameter< int >::type imageSize(imageSizeSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type data(dataSEXP);
    myGlCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    return R_NilValue;
END_RCPP
}
// myGlCopyTexImage2D
void myGlCopyTexImage2D(unsigned int target, int level, unsigned int internalformat, int x, int y, int width, int height, int border);
RcppExport SEXP _ropengl_myGlCopyTexImage2D(SEXP targetSEXP, SEXP levelSEXP, SEXP internalformatSEXP, SEXP xSEXP, SEXP ySEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP borderSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type internalformat(internalformatSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< int >::type border(borderSEXP);
    myGlCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
    return R_NilValue;
END_RCPP
}
// myGlCopyTexSubImage2D
void myGlCopyTexSubImage2D(unsigned int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
RcppExport SEXP _ropengl_myGlCopyTexSubImage2D(SEXP targetSEXP, SEXP levelSEXP, SEXP xoffsetSEXP, SEXP yoffsetSEXP, SEXP xSEXP, SEXP ySEXP, SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    Rcpp::traits::input_parameter< int >::type xoffset(xoffsetSEXP);
    Rcpp::traits::input_parameter< int >::type yoffset(yoffsetSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    myGlCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    return R_NilValue;
END_RCPP
}
// myGlCreateProgram
unsigned int myGlCreateProgram();
RcppExport SEXP _ropengl_myGlCreateProgram() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(myGlCreateProgram());
    return rcpp_result_gen;
END_RCPP
}
// myGlCreateShader
unsigned int myGlCreateShader(unsigned int type);
RcppExport SEXP _ropengl_myGlCreateShader(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlCreateShader(type));
    return rcpp_result_gen;
END_RCPP
}
// myGlCullFace
void myGlCullFace(unsigned int mode);
RcppExport SEXP _ropengl_myGlCullFace(SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type mode(modeSEXP);
    myGlCullFace(mode);
    return R_NilValue;
END_RCPP
}
// myGlDeleteBuffers
void myGlDeleteBuffers(int n, std::vector<unsigned int> buffers);
RcppExport SEXP _ropengl_myGlDeleteBuffers(SEXP nSEXP, SEXP buffersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type buffers(buffersSEXP);
    myGlDeleteBuffers(n, buffers);
    return R_NilValue;
END_RCPP
}
// myGlDeleteFramebuffers
void myGlDeleteFramebuffers(int n, std::vector<unsigned int> framebuffers);
RcppExport SEXP _ropengl_myGlDeleteFramebuffers(SEXP nSEXP, SEXP framebuffersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type framebuffers(framebuffersSEXP);
    myGlDeleteFramebuffers(n, framebuffers);
    return R_NilValue;
END_RCPP
}
// myGlDeleteProgram
void myGlDeleteProgram(unsigned int program);
RcppExport SEXP _ropengl_myGlDeleteProgram(SEXP programSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type program(programSEXP);
    myGlDeleteProgram(program);
    return R_NilValue;
END_RCPP
}
// myGlDeleteRenderbuffers
void myGlDeleteRenderbuffers(int n, std::vector<unsigned int> renderbuffers);
RcppExport SEXP _ropengl_myGlDeleteRenderbuffers(SEXP nSEXP, SEXP renderbuffersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type renderbuffers(renderbuffersSEXP);
    myGlDeleteRenderbuffers(n, renderbuffers);
    return R_NilValue;
END_RCPP
}
// myGlDeleteShader
void myGlDeleteShader(unsigned int shader);
RcppExport SEXP _ropengl_myGlDeleteShader(SEXP shaderSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type shader(shaderSEXP);
    myGlDeleteShader(shader);
    return R_NilValue;
END_RCPP
}
// myGlDeleteTextures
void myGlDeleteTextures(int n, std::vector<unsigned int> textures);
RcppExport SEXP _ropengl_myGlDeleteTextures(SEXP nSEXP, SEXP texturesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type textures(texturesSEXP);
    myGlDeleteTextures(n, textures);
    return R_NilValue;
END_RCPP
}
// myGlDepthFunc
void myGlDepthFunc(unsigned int func);
RcppExport SEXP _ropengl_myGlDepthFunc(SEXP funcSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type func(funcSEXP);
    myGlDepthFunc(func);
    return R_NilValue;
END_RCPP
}
// myGlDepthMask
void myGlDepthMask(unsigned char flag);
RcppExport SEXP _ropengl_myGlDepthMask(SEXP flagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned char >::type flag(flagSEXP);
    myGlDepthMask(flag);
    return R_NilValue;
END_RCPP
}
// myGlDepthRangef
void myGlDepthRangef(float n, float f);
RcppExport SEXP _ropengl_myGlDepthRangef(SEXP nSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type n(nSEXP);
    Rcpp::traits::input_parameter< float >::type f(fSEXP);
    myGlDepthRangef(n, f);
    return R_NilValue;
END_RCPP
}
// myGlDetachShader
void myGlDetachShader(unsigned int program, unsigned int shader);
RcppExport SEXP _ropengl_myGlDetachShader(SEXP programSEXP, SEXP shaderSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type program(programSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type shader(shaderSEXP);
    myGlDetachShader(program, shader);
    return R_NilValue;
END_RCPP
}
// myGlDisable
void myGlDisable(unsigned int cap);
RcppExport SEXP _ropengl_myGlDisable(SEXP capSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type cap(capSEXP);
    myGlDisable(cap);
    return R_NilValue;
END_RCPP
}
// myGlDisableVertexAttribArray
void myGlDisableVertexAttribArray(unsigned int index);
RcppExport SEXP _ropengl_myGlDisableVertexAttribArray(SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type index(indexSEXP);
    myGlDisableVertexAttribArray(index);
    return R_NilValue;
END_RCPP
}
// myGlDrawArrays
void myGlDrawArrays(unsigned int mode, int first, int count);
RcppExport SEXP _ropengl_myGlDrawArrays(SEXP modeSEXP, SEXP firstSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< int >::type first(firstSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    myGlDrawArrays(mode, first, count);
    return R_NilValue;
END_RCPP
}
// myGlDrawElements
void myGlDrawElements(unsigned int mode, int count, unsigned int type);
RcppExport SEXP _ropengl_myGlDrawElements(SEXP modeSEXP, SEXP countSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type type(typeSEXP);
    myGlDrawElements(mode, count, type);
    return R_NilValue;
END_RCPP
}
// myGlEnable
void myGlEnable(unsigned int cap);
RcppExport SEXP _ropengl_myGlEnable(SEXP capSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type cap(capSEXP);
    myGlEnable(cap);
    return R_NilValue;
END_RCPP
}
// myGlEnableVertexAttribArray
void myGlEnableVertexAttribArray(unsigned int index);
RcppExport SEXP _ropengl_myGlEnableVertexAttribArray(SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type index(indexSEXP);
    myGlEnableVertexAttribArray(index);
    return R_NilValue;
END_RCPP
}
// myGlFinish
void myGlFinish();
RcppExport SEXP _ropengl_myGlFinish() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    myGlFinish();
    return R_NilValue;
END_RCPP
}
// myGlFlush
void myGlFlush();
RcppExport SEXP _ropengl_myGlFlush() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    myGlFlush();
    return R_NilValue;
END_RCPP
}
// myGlFramebufferRenderbuffer
void myGlFramebufferRenderbuffer(unsigned int target, unsigned int attachment, unsigned int renderbuffertarget, unsigned int renderbuffer);
RcppExport SEXP _ropengl_myGlFramebufferRenderbuffer(SEXP targetSEXP, SEXP attachmentSEXP, SEXP renderbuffertargetSEXP, SEXP renderbufferSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type attachment(attachmentSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type renderbuffertarget(renderbuffertargetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type renderbuffer(renderbufferSEXP);
    myGlFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    return R_NilValue;
END_RCPP
}
// myGlFramebufferTexture2D
void myGlFramebufferTexture2D(unsigned int target, unsigned int attachment, unsigned int textarget, unsigned int texture, int level);
RcppExport SEXP _ropengl_myGlFramebufferTexture2D(SEXP targetSEXP, SEXP attachmentSEXP, SEXP textargetSEXP, SEXP textureSEXP, SEXP levelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type attachment(attachmentSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type textarget(textargetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type texture(textureSEXP);
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    myGlFramebufferTexture2D(target, attachment, textarget, texture, level);
    return R_NilValue;
END_RCPP
}
// myGlFrontFace
void myGlFrontFace(unsigned int mode);
RcppExport SEXP _ropengl_myGlFrontFace(SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type mode(modeSEXP);
    myGlFrontFace(mode);
    return R_NilValue;
END_RCPP
}
// myGlGenBuffers
std::vector<int> myGlGenBuffers(int n);
RcppExport SEXP _ropengl_myGlGenBuffers(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGenBuffers(n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGenerateMipmap
void myGlGenerateMipmap(unsigned int target);
RcppExport SEXP _ropengl_myGlGenerateMipmap(SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    myGlGenerateMipmap(target);
    return R_NilValue;
END_RCPP
}
// myGlGenFramebuffers
std::vector<unsigned int> myGlGenFramebuffers(int n);
RcppExport SEXP _ropengl_myGlGenFramebuffers(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGenFramebuffers(n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGenRenderbuffers
std::vector<unsigned int> myGlGenRenderbuffers(int n);
RcppExport SEXP _ropengl_myGlGenRenderbuffers(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGenRenderbuffers(n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGenTextures
std::vector<unsigned int> myGlGenTextures(int n);
RcppExport SEXP _ropengl_myGlGenTextures(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGenTextures(n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGetAttribLocation
int myGlGetAttribLocation(unsigned int program, std::string name);
RcppExport SEXP _ropengl_myGlGetAttribLocation(SEXP programSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type program(programSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGetAttribLocation(program, name));
    return rcpp_result_gen;
END_RCPP
}
// myGlGetBufferParameteriv
std::vector<int> myGlGetBufferParameteriv(unsigned int target, unsigned int pname, int n);
RcppExport SEXP _ropengl_myGlGetBufferParameteriv(SEXP targetSEXP, SEXP pnameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGetBufferParameteriv(target, pname, n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGetError
unsigned int myGlGetError();
RcppExport SEXP _ropengl_myGlGetError() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(myGlGetError());
    return rcpp_result_gen;
END_RCPP
}
// myGlGetFloatv
std::vector<float> myGlGetFloatv(unsigned int pname, int n);
RcppExport SEXP _ropengl_myGlGetFloatv(SEXP pnameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGetFloatv(pname, n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGetFramebufferAttachmentParameteriv
std::vector<int> myGlGetFramebufferAttachmentParameteriv(unsigned int target, unsigned int attachment, unsigned int pname, int n);
RcppExport SEXP _ropengl_myGlGetFramebufferAttachmentParameteriv(SEXP targetSEXP, SEXP attachmentSEXP, SEXP pnameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type attachment(attachmentSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGetFramebufferAttachmentParameteriv(target, attachment, pname, n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGetIntegerv
std::vector<int> myGlGetIntegerv(unsigned int pname, int n);
RcppExport SEXP _ropengl_myGlGetIntegerv(SEXP pnameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGetIntegerv(pname, n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGetProgramiv
std::vector<int> myGlGetProgramiv(unsigned int program, unsigned int pname, int n);
RcppExport SEXP _ropengl_myGlGetProgramiv(SEXP programSEXP, SEXP pnameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type program(programSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGetProgramiv(program, pname, n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGetRenderbufferParameteriv
std::vector<int> myGlGetRenderbufferParameteriv(unsigned int target, unsigned int pname, int n);
RcppExport SEXP _ropengl_myGlGetRenderbufferParameteriv(SEXP targetSEXP, SEXP pnameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGetRenderbufferParameteriv(target, pname, n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGetShaderiv
std::vector<int> myGlGetShaderiv(unsigned int shader, unsigned int pname, int n);
RcppExport SEXP _ropengl_myGlGetShaderiv(SEXP shaderSEXP, SEXP pnameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type shader(shaderSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGetShaderiv(shader, pname, n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGetTexParameterfv
std::vector<float> myGlGetTexParameterfv(unsigned int target, unsigned int pname, int n);
RcppExport SEXP _ropengl_myGlGetTexParameterfv(SEXP targetSEXP, SEXP pnameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGetTexParameterfv(target, pname, n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGetTexParameteriv
std::vector<int> myGlGetTexParameteriv(unsigned int target, unsigned int pname, int n);
RcppExport SEXP _ropengl_myGlGetTexParameteriv(SEXP targetSEXP, SEXP pnameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGetTexParameteriv(target, pname, n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGetUniformfv
std::vector<float> myGlGetUniformfv(unsigned int program, int location, int n);
RcppExport SEXP _ropengl_myGlGetUniformfv(SEXP programSEXP, SEXP locationSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type program(programSEXP);
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGetUniformfv(program, location, n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGetUniformiv
std::vector<int> myGlGetUniformiv(unsigned int program, int location, int n);
RcppExport SEXP _ropengl_myGlGetUniformiv(SEXP programSEXP, SEXP locationSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type program(programSEXP);
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGetUniformiv(program, location, n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGetUniformLocation
int myGlGetUniformLocation(unsigned int program, std::string name);
RcppExport SEXP _ropengl_myGlGetUniformLocation(SEXP programSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type program(programSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGetUniformLocation(program, name));
    return rcpp_result_gen;
END_RCPP
}
// myGlGetVertexAttribfv
std::vector<float> myGlGetVertexAttribfv(unsigned int index, unsigned int pname, int n);
RcppExport SEXP _ropengl_myGlGetVertexAttribfv(SEXP indexSEXP, SEXP pnameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGetVertexAttribfv(index, pname, n));
    return rcpp_result_gen;
END_RCPP
}
// myGlGetVertexAttribiv
std::vector<int> myGlGetVertexAttribiv(unsigned int index, unsigned int pname, int n);
RcppExport SEXP _ropengl_myGlGetVertexAttribiv(SEXP indexSEXP, SEXP pnameSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlGetVertexAttribiv(index, pname, n));
    return rcpp_result_gen;
END_RCPP
}
// myGlHint
void myGlHint(unsigned int target, unsigned int mode);
RcppExport SEXP _ropengl_myGlHint(SEXP targetSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type mode(modeSEXP);
    myGlHint(target, mode);
    return R_NilValue;
END_RCPP
}
// myGlIsBuffer
unsigned char myGlIsBuffer(unsigned int buffer);
RcppExport SEXP _ropengl_myGlIsBuffer(SEXP bufferSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type buffer(bufferSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlIsBuffer(buffer));
    return rcpp_result_gen;
END_RCPP
}
// myGlIsEnabled
unsigned char myGlIsEnabled(unsigned int cap);
RcppExport SEXP _ropengl_myGlIsEnabled(SEXP capSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type cap(capSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlIsEnabled(cap));
    return rcpp_result_gen;
END_RCPP
}
// myGlIsFramebuffer
unsigned char myGlIsFramebuffer(unsigned int framebuffer);
RcppExport SEXP _ropengl_myGlIsFramebuffer(SEXP framebufferSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type framebuffer(framebufferSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlIsFramebuffer(framebuffer));
    return rcpp_result_gen;
END_RCPP
}
// myGlIsProgram
unsigned char myGlIsProgram(unsigned int program);
RcppExport SEXP _ropengl_myGlIsProgram(SEXP programSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type program(programSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlIsProgram(program));
    return rcpp_result_gen;
END_RCPP
}
// myGlIsRenderbuffer
unsigned char myGlIsRenderbuffer(unsigned int renderbuffer);
RcppExport SEXP _ropengl_myGlIsRenderbuffer(SEXP renderbufferSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type renderbuffer(renderbufferSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlIsRenderbuffer(renderbuffer));
    return rcpp_result_gen;
END_RCPP
}
// myGlIsShader
unsigned char myGlIsShader(unsigned int shader);
RcppExport SEXP _ropengl_myGlIsShader(SEXP shaderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type shader(shaderSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlIsShader(shader));
    return rcpp_result_gen;
END_RCPP
}
// myGlIsTexture
unsigned char myGlIsTexture(unsigned int texture);
RcppExport SEXP _ropengl_myGlIsTexture(SEXP textureSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type texture(textureSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlIsTexture(texture));
    return rcpp_result_gen;
END_RCPP
}
// myGlLineWidth
void myGlLineWidth(float width);
RcppExport SEXP _ropengl_myGlLineWidth(SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type width(widthSEXP);
    myGlLineWidth(width);
    return R_NilValue;
END_RCPP
}
// myGlLinkProgram
void myGlLinkProgram(unsigned int program);
RcppExport SEXP _ropengl_myGlLinkProgram(SEXP programSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type program(programSEXP);
    myGlLinkProgram(program);
    return R_NilValue;
END_RCPP
}
// myGlPixelStorei
void myGlPixelStorei(unsigned int pname, int param);
RcppExport SEXP _ropengl_myGlPixelStorei(SEXP pnameSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< int >::type param(paramSEXP);
    myGlPixelStorei(pname, param);
    return R_NilValue;
END_RCPP
}
// myGlPolygonOffset
void myGlPolygonOffset(float factor, float units);
RcppExport SEXP _ropengl_myGlPolygonOffset(SEXP factorSEXP, SEXP unitsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type factor(factorSEXP);
    Rcpp::traits::input_parameter< float >::type units(unitsSEXP);
    myGlPolygonOffset(factor, units);
    return R_NilValue;
END_RCPP
}
// myGlReadPixels
std::vector<float> myGlReadPixels(int x, int y, int width, int height, unsigned int format, unsigned int type, int n);
RcppExport SEXP _ropengl_myGlReadPixels(SEXP xSEXP, SEXP ySEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP formatSEXP, SEXP typeSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type format(formatSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(myGlReadPixels(x, y, width, height, format, type, n));
    return rcpp_result_gen;
END_RCPP
}
// myGlReleaseShaderCompiler
void myGlReleaseShaderCompiler();
RcppExport SEXP _ropengl_myGlReleaseShaderCompiler() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    myGlReleaseShaderCompiler();
    return R_NilValue;
END_RCPP
}
// myGlRenderbufferStorage
void myGlRenderbufferStorage(unsigned int target, unsigned int internalformat, int width, int height);
RcppExport SEXP _ropengl_myGlRenderbufferStorage(SEXP targetSEXP, SEXP internalformatSEXP, SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type internalformat(internalformatSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    myGlRenderbufferStorage(target, internalformat, width, height);
    return R_NilValue;
END_RCPP
}
// myGlSampleCoverage
void myGlSampleCoverage(float value, unsigned char invert);
RcppExport SEXP _ropengl_myGlSampleCoverage(SEXP valueSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type value(valueSEXP);
    Rcpp::traits::input_parameter< unsigned char >::type invert(invertSEXP);
    myGlSampleCoverage(value, invert);
    return R_NilValue;
END_RCPP
}
// myGlScissor
void myGlScissor(int x, int y, int width, int height);
RcppExport SEXP _ropengl_myGlScissor(SEXP xSEXP, SEXP ySEXP, SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    myGlScissor(x, y, width, height);
    return R_NilValue;
END_RCPP
}
// myGlStencilFunc
void myGlStencilFunc(unsigned int func, int ref, unsigned int mask);
RcppExport SEXP _ropengl_myGlStencilFunc(SEXP funcSEXP, SEXP refSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type func(funcSEXP);
    Rcpp::traits::input_parameter< int >::type ref(refSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type mask(maskSEXP);
    myGlStencilFunc(func, ref, mask);
    return R_NilValue;
END_RCPP
}
// myGlStencilFuncSeparate
void myGlStencilFuncSeparate(unsigned int face, unsigned int func, int ref, unsigned int mask);
RcppExport SEXP _ropengl_myGlStencilFuncSeparate(SEXP faceSEXP, SEXP funcSEXP, SEXP refSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type face(faceSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type func(funcSEXP);
    Rcpp::traits::input_parameter< int >::type ref(refSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type mask(maskSEXP);
    myGlStencilFuncSeparate(face, func, ref, mask);
    return R_NilValue;
END_RCPP
}
// myGlStencilMask
void myGlStencilMask(unsigned int mask);
RcppExport SEXP _ropengl_myGlStencilMask(SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type mask(maskSEXP);
    myGlStencilMask(mask);
    return R_NilValue;
END_RCPP
}
// myGlStencilMaskSeparate
void myGlStencilMaskSeparate(unsigned int face, unsigned int mask);
RcppExport SEXP _ropengl_myGlStencilMaskSeparate(SEXP faceSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type face(faceSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type mask(maskSEXP);
    myGlStencilMaskSeparate(face, mask);
    return R_NilValue;
END_RCPP
}
// myGlStencilOp
void myGlStencilOp(unsigned int fail, unsigned int zfail, unsigned int zpass);
RcppExport SEXP _ropengl_myGlStencilOp(SEXP failSEXP, SEXP zfailSEXP, SEXP zpassSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type fail(failSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type zfail(zfailSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type zpass(zpassSEXP);
    myGlStencilOp(fail, zfail, zpass);
    return R_NilValue;
END_RCPP
}
// myGlStencilOpSeparate
void myGlStencilOpSeparate(unsigned int face, unsigned int sfail, unsigned int dpfail, unsigned int dppass);
RcppExport SEXP _ropengl_myGlStencilOpSeparate(SEXP faceSEXP, SEXP sfailSEXP, SEXP dpfailSEXP, SEXP dppassSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type face(faceSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type sfail(sfailSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type dpfail(dpfailSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type dppass(dppassSEXP);
    myGlStencilOpSeparate(face, sfail, dpfail, dppass);
    return R_NilValue;
END_RCPP
}
// myGlTexImage2D
void myGlTexImage2D(const char * fname);
RcppExport SEXP _ropengl_myGlTexImage2D(SEXP fnameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type fname(fnameSEXP);
    myGlTexImage2D(fname);
    return R_NilValue;
END_RCPP
}
// myGlTexParameterf
void myGlTexParameterf(unsigned int target, unsigned int pname, float param);
RcppExport SEXP _ropengl_myGlTexParameterf(SEXP targetSEXP, SEXP pnameSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< float >::type param(paramSEXP);
    myGlTexParameterf(target, pname, param);
    return R_NilValue;
END_RCPP
}
// myGlTexParameterfv
void myGlTexParameterfv(unsigned int target, unsigned int pname, std::vector<float> params);
RcppExport SEXP _ropengl_myGlTexParameterfv(SEXP targetSEXP, SEXP pnameSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type params(paramsSEXP);
    myGlTexParameterfv(target, pname, params);
    return R_NilValue;
END_RCPP
}
// myGlTexParameteri
void myGlTexParameteri(unsigned int target, unsigned int pname, int param);
RcppExport SEXP _ropengl_myGlTexParameteri(SEXP targetSEXP, SEXP pnameSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< int >::type param(paramSEXP);
    myGlTexParameteri(target, pname, param);
    return R_NilValue;
END_RCPP
}
// myGlTexParameteriv
void myGlTexParameteriv(unsigned int target, unsigned int pname, std::vector<int> params);
RcppExport SEXP _ropengl_myGlTexParameteriv(SEXP targetSEXP, SEXP pnameSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type pname(pnameSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type params(paramsSEXP);
    myGlTexParameteriv(target, pname, params);
    return R_NilValue;
END_RCPP
}
// myGlTexSubImage2D
void myGlTexSubImage2D(unsigned int target, int level, int xoffset, int yoffset, int width, int height, unsigned int format, unsigned int type, std::vector<float> pixels);
RcppExport SEXP _ropengl_myGlTexSubImage2D(SEXP targetSEXP, SEXP levelSEXP, SEXP xoffsetSEXP, SEXP yoffsetSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP formatSEXP, SEXP typeSEXP, SEXP pixelsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int >::type level(levelSEXP);
    Rcpp::traits::input_parameter< int >::type xoffset(xoffsetSEXP);
    Rcpp::traits::input_parameter< int >::type yoffset(yoffsetSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type format(formatSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type pixels(pixelsSEXP);
    myGlTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    return R_NilValue;
END_RCPP
}
// myGlUniform1f
void myGlUniform1f(int location, float v0);
RcppExport SEXP _ropengl_myGlUniform1f(SEXP locationSEXP, SEXP v0SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< float >::type v0(v0SEXP);
    myGlUniform1f(location, v0);
    return R_NilValue;
END_RCPP
}
// myGlUniform1fv
void myGlUniform1fv(int location, int count, std::vector<float> value);
RcppExport SEXP _ropengl_myGlUniform1fv(SEXP locationSEXP, SEXP countSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type value(valueSEXP);
    myGlUniform1fv(location, count, value);
    return R_NilValue;
END_RCPP
}
// myGlUniform1i
void myGlUniform1i(int location, int v0);
RcppExport SEXP _ropengl_myGlUniform1i(SEXP locationSEXP, SEXP v0SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type v0(v0SEXP);
    myGlUniform1i(location, v0);
    return R_NilValue;
END_RCPP
}
// myGlUniform1iv
void myGlUniform1iv(int location, int count, std::vector<int> value);
RcppExport SEXP _ropengl_myGlUniform1iv(SEXP locationSEXP, SEXP countSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type value(valueSEXP);
    myGlUniform1iv(location, count, value);
    return R_NilValue;
END_RCPP
}
// myGlUniform2f
void myGlUniform2f(int location, float v0, float v1);
RcppExport SEXP _ropengl_myGlUniform2f(SEXP locationSEXP, SEXP v0SEXP, SEXP v1SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< float >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< float >::type v1(v1SEXP);
    myGlUniform2f(location, v0, v1);
    return R_NilValue;
END_RCPP
}
// myGlUniform2fv
void myGlUniform2fv(int location, int count, std::vector<float> value);
RcppExport SEXP _ropengl_myGlUniform2fv(SEXP locationSEXP, SEXP countSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type value(valueSEXP);
    myGlUniform2fv(location, count, value);
    return R_NilValue;
END_RCPP
}
// myGlUniform2i
void myGlUniform2i(int location, int v0, int v1);
RcppExport SEXP _ropengl_myGlUniform2i(SEXP locationSEXP, SEXP v0SEXP, SEXP v1SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< int >::type v1(v1SEXP);
    myGlUniform2i(location, v0, v1);
    return R_NilValue;
END_RCPP
}
// myGlUniform2iv
void myGlUniform2iv(int location, int count, std::vector<int> value);
RcppExport SEXP _ropengl_myGlUniform2iv(SEXP locationSEXP, SEXP countSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type value(valueSEXP);
    myGlUniform2iv(location, count, value);
    return R_NilValue;
END_RCPP
}
// myGlUniform3f
void myGlUniform3f(int location, float v0, float v1, float v2);
RcppExport SEXP _ropengl_myGlUniform3f(SEXP locationSEXP, SEXP v0SEXP, SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< float >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< float >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< float >::type v2(v2SEXP);
    myGlUniform3f(location, v0, v1, v2);
    return R_NilValue;
END_RCPP
}
// myGlUniform3fv
void myGlUniform3fv(int location, int count, std::vector<float> value);
RcppExport SEXP _ropengl_myGlUniform3fv(SEXP locationSEXP, SEXP countSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type value(valueSEXP);
    myGlUniform3fv(location, count, value);
    return R_NilValue;
END_RCPP
}
// myGlUniform3i
void myGlUniform3i(int location, int v0, int v1, int v2);
RcppExport SEXP _ropengl_myGlUniform3i(SEXP locationSEXP, SEXP v0SEXP, SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< int >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< int >::type v2(v2SEXP);
    myGlUniform3i(location, v0, v1, v2);
    return R_NilValue;
END_RCPP
}
// myGlUniform3iv
void myGlUniform3iv(int location, int count, std::vector<int> value);
RcppExport SEXP _ropengl_myGlUniform3iv(SEXP locationSEXP, SEXP countSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type value(valueSEXP);
    myGlUniform3iv(location, count, value);
    return R_NilValue;
END_RCPP
}
// myGlUniform4f
void myGlUniform4f(int location, float v0, float v1, float v2, float v3);
RcppExport SEXP _ropengl_myGlUniform4f(SEXP locationSEXP, SEXP v0SEXP, SEXP v1SEXP, SEXP v2SEXP, SEXP v3SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< float >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< float >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< float >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< float >::type v3(v3SEXP);
    myGlUniform4f(location, v0, v1, v2, v3);
    return R_NilValue;
END_RCPP
}
// myGlUniform4fv
void myGlUniform4fv(int location, int count, std::vector<float> value);
RcppExport SEXP _ropengl_myGlUniform4fv(SEXP locationSEXP, SEXP countSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type value(valueSEXP);
    myGlUniform4fv(location, count, value);
    return R_NilValue;
END_RCPP
}
// myGlUniform4i
void myGlUniform4i(int location, int v0, int v1, int v2, int v3);
RcppExport SEXP _ropengl_myGlUniform4i(SEXP locationSEXP, SEXP v0SEXP, SEXP v1SEXP, SEXP v2SEXP, SEXP v3SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< int >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< int >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< int >::type v3(v3SEXP);
    myGlUniform4i(location, v0, v1, v2, v3);
    return R_NilValue;
END_RCPP
}
// myGlUniform4iv
void myGlUniform4iv(int location, int count, std::vector<int> value);
RcppExport SEXP _ropengl_myGlUniform4iv(SEXP locationSEXP, SEXP countSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type value(valueSEXP);
    myGlUniform4iv(location, count, value);
    return R_NilValue;
END_RCPP
}
// myGlUniformMatrix2fv
void myGlUniformMatrix2fv(int location, int count, unsigned char transpose, std::vector<float> value);
RcppExport SEXP _ropengl_myGlUniformMatrix2fv(SEXP locationSEXP, SEXP countSEXP, SEXP transposeSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    Rcpp::traits::input_parameter< unsigned char >::type transpose(transposeSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type value(valueSEXP);
    myGlUniformMatrix2fv(location, count, transpose, value);
    return R_NilValue;
END_RCPP
}
// myGlUniformMatrix3fv
void myGlUniformMatrix3fv(int location, int count, unsigned char transpose, std::vector<float> value);
RcppExport SEXP _ropengl_myGlUniformMatrix3fv(SEXP locationSEXP, SEXP countSEXP, SEXP transposeSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    Rcpp::traits::input_parameter< unsigned char >::type transpose(transposeSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type value(valueSEXP);
    myGlUniformMatrix3fv(location, count, transpose, value);
    return R_NilValue;
END_RCPP
}
// myGlUniformMatrix4fv
void myGlUniformMatrix4fv(int location, int count, unsigned char transpose, NumericMatrix mat);
RcppExport SEXP _ropengl_myGlUniformMatrix4fv(SEXP locationSEXP, SEXP countSEXP, SEXP transposeSEXP, SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type location(locationSEXP);
    Rcpp::traits::input_parameter< int >::type count(countSEXP);
    Rcpp::traits::input_parameter< unsigned char >::type transpose(transposeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    myGlUniformMatrix4fv(location, count, transpose, mat);
    return R_NilValue;
END_RCPP
}
// myGlUseProgram
void myGlUseProgram(unsigned int program);
RcppExport SEXP _ropengl_myGlUseProgram(SEXP programSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type program(programSEXP);
    myGlUseProgram(program);
    return R_NilValue;
END_RCPP
}
// myGlValidateProgram
void myGlValidateProgram(unsigned int program);
RcppExport SEXP _ropengl_myGlValidateProgram(SEXP programSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type program(programSEXP);
    myGlValidateProgram(program);
    return R_NilValue;
END_RCPP
}
// myGlVertexAttrib1f
void myGlVertexAttrib1f(unsigned int index, float x);
RcppExport SEXP _ropengl_myGlVertexAttrib1f(SEXP indexSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< float >::type x(xSEXP);
    myGlVertexAttrib1f(index, x);
    return R_NilValue;
END_RCPP
}
// myGlVertexAttrib1fv
void myGlVertexAttrib1fv(unsigned int index, std::vector<float> v);
RcppExport SEXP _ropengl_myGlVertexAttrib1fv(SEXP indexSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type v(vSEXP);
    myGlVertexAttrib1fv(index, v);
    return R_NilValue;
END_RCPP
}
// myGlVertexAttrib2f
void myGlVertexAttrib2f(unsigned int index, float x, float y);
RcppExport SEXP _ropengl_myGlVertexAttrib2f(SEXP indexSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< float >::type x(xSEXP);
    Rcpp::traits::input_parameter< float >::type y(ySEXP);
    myGlVertexAttrib2f(index, x, y);
    return R_NilValue;
END_RCPP
}
// myGlVertexAttrib2fv
void myGlVertexAttrib2fv(unsigned int index, std::vector<float> v);
RcppExport SEXP _ropengl_myGlVertexAttrib2fv(SEXP indexSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type v(vSEXP);
    myGlVertexAttrib2fv(index, v);
    return R_NilValue;
END_RCPP
}
// myGlVertexAttrib3f
void myGlVertexAttrib3f(unsigned int index, float x, float y, float z);
RcppExport SEXP _ropengl_myGlVertexAttrib3f(SEXP indexSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< float >::type x(xSEXP);
    Rcpp::traits::input_parameter< float >::type y(ySEXP);
    Rcpp::traits::input_parameter< float >::type z(zSEXP);
    myGlVertexAttrib3f(index, x, y, z);
    return R_NilValue;
END_RCPP
}
// myGlVertexAttrib3fv
void myGlVertexAttrib3fv(unsigned int index, std::vector<float> v);
RcppExport SEXP _ropengl_myGlVertexAttrib3fv(SEXP indexSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type v(vSEXP);
    myGlVertexAttrib3fv(index, v);
    return R_NilValue;
END_RCPP
}
// myGlVertexAttrib4f
void myGlVertexAttrib4f(unsigned int index, float x, float y, float z, float w);
RcppExport SEXP _ropengl_myGlVertexAttrib4f(SEXP indexSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< float >::type x(xSEXP);
    Rcpp::traits::input_parameter< float >::type y(ySEXP);
    Rcpp::traits::input_parameter< float >::type z(zSEXP);
    Rcpp::traits::input_parameter< float >::type w(wSEXP);
    myGlVertexAttrib4f(index, x, y, z, w);
    return R_NilValue;
END_RCPP
}
// myGlVertexAttrib4fv
void myGlVertexAttrib4fv(unsigned int index, std::vector<float> v);
RcppExport SEXP _ropengl_myGlVertexAttrib4fv(SEXP indexSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< std::vector<float> >::type v(vSEXP);
    myGlVertexAttrib4fv(index, v);
    return R_NilValue;
END_RCPP
}
// myGlVertexAttribPointer
void myGlVertexAttribPointer(unsigned int index, int size, unsigned int type, unsigned char normalized, int stride, int pointer);
RcppExport SEXP _ropengl_myGlVertexAttribPointer(SEXP indexSEXP, SEXP sizeSEXP, SEXP typeSEXP, SEXP normalizedSEXP, SEXP strideSEXP, SEXP pointerSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< unsigned char >::type normalized(normalizedSEXP);
    Rcpp::traits::input_parameter< int >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< int >::type pointer(pointerSEXP);
    myGlVertexAttribPointer(index, size, type, normalized, stride, pointer);
    return R_NilValue;
END_RCPP
}
// myGlViewport
void myGlViewport(int x, int y, int width, int height);
RcppExport SEXP _ropengl_myGlViewport(SEXP xSEXP, SEXP ySEXP, SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    myGlViewport(x, y, width, height);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ropengl_example", (DL_FUNC) &_ropengl_example, 0},
    {"_ropengl_readFile", (DL_FUNC) &_ropengl_readFile, 1},
    {"_ropengl_myGlfwInit", (DL_FUNC) &_ropengl_myGlfwInit, 0},
    {"_ropengl_flip", (DL_FUNC) &_ropengl_flip, 0},
    {"_ropengl_ortho", (DL_FUNC) &_ropengl_ortho, 6},
    {"_ropengl_perspective", (DL_FUNC) &_ropengl_perspective, 4},
    {"_ropengl_frustum", (DL_FUNC) &_ropengl_frustum, 6},
    {"_ropengl_identity", (DL_FUNC) &_ropengl_identity, 0},
    {"_ropengl_lookAt", (DL_FUNC) &_ropengl_lookAt, 3},
    {"_ropengl_scale", (DL_FUNC) &_ropengl_scale, 2},
    {"_ropengl_translate", (DL_FUNC) &_ropengl_translate, 2},
    {"_ropengl_rotate", (DL_FUNC) &_ropengl_rotate, 3},
    {"_ropengl_normalize", (DL_FUNC) &_ropengl_normalize, 1},
    {"_ropengl_cross", (DL_FUNC) &_ropengl_cross, 2},
    {"_ropengl_getKeyId", (DL_FUNC) &_ropengl_getKeyId, 1},
    {"_ropengl_getKeyByName", (DL_FUNC) &_ropengl_getKeyByName, 1},
    {"_ropengl_myGlfwGetKeyName", (DL_FUNC) &_ropengl_myGlfwGetKeyName, 1},
    {"_ropengl_getKeyById", (DL_FUNC) &_ropengl_getKeyById, 1},
    {"_ropengl_initKeyMap", (DL_FUNC) &_ropengl_initKeyMap, 0},
    {"_ropengl_hideCursor", (DL_FUNC) &_ropengl_hideCursor, 0},
    {"_ropengl_showCursor", (DL_FUNC) &_ropengl_showCursor, 0},
    {"_ropengl_getCursorPos", (DL_FUNC) &_ropengl_getCursorPos, 0},
    {"_ropengl_setCursorPos", (DL_FUNC) &_ropengl_setCursorPos, 2},
    {"_ropengl_getMouseButtons", (DL_FUNC) &_ropengl_getMouseButtons, 0},
    {"_ropengl_getScrollWheel", (DL_FUNC) &_ropengl_getScrollWheel, 0},
    {"_ropengl_createWindow", (DL_FUNC) &_ropengl_createWindow, 4},
    {"_ropengl_focusWindow", (DL_FUNC) &_ropengl_focusWindow, 0},
    {"_ropengl_closeWindow", (DL_FUNC) &_ropengl_closeWindow, 0},
    {"_ropengl_shouldWindowClose", (DL_FUNC) &_ropengl_shouldWindowClose, 0},
    {"_ropengl_getFlag", (DL_FUNC) &_ropengl_getFlag, 1},
    {"_ropengl_getFlagsOR", (DL_FUNC) &_ropengl_getFlagsOR, 2},
    {"_ropengl_myGlShaderSource", (DL_FUNC) &_ropengl_myGlShaderSource, 3},
    {"_ropengl_myGlGenVertexArrays", (DL_FUNC) &_ropengl_myGlGenVertexArrays, 1},
    {"_ropengl_myGlDeleteVertexArrays", (DL_FUNC) &_ropengl_myGlDeleteVertexArrays, 2},
    {"_ropengl_myGlBindVertexArray", (DL_FUNC) &_ropengl_myGlBindVertexArray, 1},
    {"_ropengl_myGlActiveTexture", (DL_FUNC) &_ropengl_myGlActiveTexture, 1},
    {"_ropengl_myGlAttachShader", (DL_FUNC) &_ropengl_myGlAttachShader, 2},
    {"_ropengl_myGlBindAttribLocation", (DL_FUNC) &_ropengl_myGlBindAttribLocation, 3},
    {"_ropengl_myGlBindBuffer", (DL_FUNC) &_ropengl_myGlBindBuffer, 2},
    {"_ropengl_myGlBindFramebuffer", (DL_FUNC) &_ropengl_myGlBindFramebuffer, 2},
    {"_ropengl_myGlBindRenderbuffer", (DL_FUNC) &_ropengl_myGlBindRenderbuffer, 2},
    {"_ropengl_myGlBindTexture", (DL_FUNC) &_ropengl_myGlBindTexture, 2},
    {"_ropengl_myGlBlendColor", (DL_FUNC) &_ropengl_myGlBlendColor, 4},
    {"_ropengl_myGlBlendEquation", (DL_FUNC) &_ropengl_myGlBlendEquation, 1},
    {"_ropengl_myGlBlendEquationSeparate", (DL_FUNC) &_ropengl_myGlBlendEquationSeparate, 2},
    {"_ropengl_myGlBlendFunc", (DL_FUNC) &_ropengl_myGlBlendFunc, 2},
    {"_ropengl_myGlBlendFuncSeparate", (DL_FUNC) &_ropengl_myGlBlendFuncSeparate, 4},
    {"_ropengl_myGlBufferData", (DL_FUNC) &_ropengl_myGlBufferData, 4},
    {"_ropengl_myGlBufferSubData", (DL_FUNC) &_ropengl_myGlBufferSubData, 4},
    {"_ropengl_myGlCheckFramebufferStatus", (DL_FUNC) &_ropengl_myGlCheckFramebufferStatus, 1},
    {"_ropengl_myGlClear", (DL_FUNC) &_ropengl_myGlClear, 1},
    {"_ropengl_myGlClearColor", (DL_FUNC) &_ropengl_myGlClearColor, 4},
    {"_ropengl_myGlClearDepthf", (DL_FUNC) &_ropengl_myGlClearDepthf, 1},
    {"_ropengl_myGlClearStencil", (DL_FUNC) &_ropengl_myGlClearStencil, 1},
    {"_ropengl_myGlColorMask", (DL_FUNC) &_ropengl_myGlColorMask, 4},
    {"_ropengl_myGlCompileShader", (DL_FUNC) &_ropengl_myGlCompileShader, 1},
    {"_ropengl_myGlCompressedTexImage2D", (DL_FUNC) &_ropengl_myGlCompressedTexImage2D, 8},
    {"_ropengl_myGlCompressedTexSubImage2D", (DL_FUNC) &_ropengl_myGlCompressedTexSubImage2D, 9},
    {"_ropengl_myGlCopyTexImage2D", (DL_FUNC) &_ropengl_myGlCopyTexImage2D, 8},
    {"_ropengl_myGlCopyTexSubImage2D", (DL_FUNC) &_ropengl_myGlCopyTexSubImage2D, 8},
    {"_ropengl_myGlCreateProgram", (DL_FUNC) &_ropengl_myGlCreateProgram, 0},
    {"_ropengl_myGlCreateShader", (DL_FUNC) &_ropengl_myGlCreateShader, 1},
    {"_ropengl_myGlCullFace", (DL_FUNC) &_ropengl_myGlCullFace, 1},
    {"_ropengl_myGlDeleteBuffers", (DL_FUNC) &_ropengl_myGlDeleteBuffers, 2},
    {"_ropengl_myGlDeleteFramebuffers", (DL_FUNC) &_ropengl_myGlDeleteFramebuffers, 2},
    {"_ropengl_myGlDeleteProgram", (DL_FUNC) &_ropengl_myGlDeleteProgram, 1},
    {"_ropengl_myGlDeleteRenderbuffers", (DL_FUNC) &_ropengl_myGlDeleteRenderbuffers, 2},
    {"_ropengl_myGlDeleteShader", (DL_FUNC) &_ropengl_myGlDeleteShader, 1},
    {"_ropengl_myGlDeleteTextures", (DL_FUNC) &_ropengl_myGlDeleteTextures, 2},
    {"_ropengl_myGlDepthFunc", (DL_FUNC) &_ropengl_myGlDepthFunc, 1},
    {"_ropengl_myGlDepthMask", (DL_FUNC) &_ropengl_myGlDepthMask, 1},
    {"_ropengl_myGlDepthRangef", (DL_FUNC) &_ropengl_myGlDepthRangef, 2},
    {"_ropengl_myGlDetachShader", (DL_FUNC) &_ropengl_myGlDetachShader, 2},
    {"_ropengl_myGlDisable", (DL_FUNC) &_ropengl_myGlDisable, 1},
    {"_ropengl_myGlDisableVertexAttribArray", (DL_FUNC) &_ropengl_myGlDisableVertexAttribArray, 1},
    {"_ropengl_myGlDrawArrays", (DL_FUNC) &_ropengl_myGlDrawArrays, 3},
    {"_ropengl_myGlDrawElements", (DL_FUNC) &_ropengl_myGlDrawElements, 3},
    {"_ropengl_myGlEnable", (DL_FUNC) &_ropengl_myGlEnable, 1},
    {"_ropengl_myGlEnableVertexAttribArray", (DL_FUNC) &_ropengl_myGlEnableVertexAttribArray, 1},
    {"_ropengl_myGlFinish", (DL_FUNC) &_ropengl_myGlFinish, 0},
    {"_ropengl_myGlFlush", (DL_FUNC) &_ropengl_myGlFlush, 0},
    {"_ropengl_myGlFramebufferRenderbuffer", (DL_FUNC) &_ropengl_myGlFramebufferRenderbuffer, 4},
    {"_ropengl_myGlFramebufferTexture2D", (DL_FUNC) &_ropengl_myGlFramebufferTexture2D, 5},
    {"_ropengl_myGlFrontFace", (DL_FUNC) &_ropengl_myGlFrontFace, 1},
    {"_ropengl_myGlGenBuffers", (DL_FUNC) &_ropengl_myGlGenBuffers, 1},
    {"_ropengl_myGlGenerateMipmap", (DL_FUNC) &_ropengl_myGlGenerateMipmap, 1},
    {"_ropengl_myGlGenFramebuffers", (DL_FUNC) &_ropengl_myGlGenFramebuffers, 1},
    {"_ropengl_myGlGenRenderbuffers", (DL_FUNC) &_ropengl_myGlGenRenderbuffers, 1},
    {"_ropengl_myGlGenTextures", (DL_FUNC) &_ropengl_myGlGenTextures, 1},
    {"_ropengl_myGlGetAttribLocation", (DL_FUNC) &_ropengl_myGlGetAttribLocation, 2},
    {"_ropengl_myGlGetBufferParameteriv", (DL_FUNC) &_ropengl_myGlGetBufferParameteriv, 3},
    {"_ropengl_myGlGetError", (DL_FUNC) &_ropengl_myGlGetError, 0},
    {"_ropengl_myGlGetFloatv", (DL_FUNC) &_ropengl_myGlGetFloatv, 2},
    {"_ropengl_myGlGetFramebufferAttachmentParameteriv", (DL_FUNC) &_ropengl_myGlGetFramebufferAttachmentParameteriv, 4},
    {"_ropengl_myGlGetIntegerv", (DL_FUNC) &_ropengl_myGlGetIntegerv, 2},
    {"_ropengl_myGlGetProgramiv", (DL_FUNC) &_ropengl_myGlGetProgramiv, 3},
    {"_ropengl_myGlGetRenderbufferParameteriv", (DL_FUNC) &_ropengl_myGlGetRenderbufferParameteriv, 3},
    {"_ropengl_myGlGetShaderiv", (DL_FUNC) &_ropengl_myGlGetShaderiv, 3},
    {"_ropengl_myGlGetTexParameterfv", (DL_FUNC) &_ropengl_myGlGetTexParameterfv, 3},
    {"_ropengl_myGlGetTexParameteriv", (DL_FUNC) &_ropengl_myGlGetTexParameteriv, 3},
    {"_ropengl_myGlGetUniformfv", (DL_FUNC) &_ropengl_myGlGetUniformfv, 3},
    {"_ropengl_myGlGetUniformiv", (DL_FUNC) &_ropengl_myGlGetUniformiv, 3},
    {"_ropengl_myGlGetUniformLocation", (DL_FUNC) &_ropengl_myGlGetUniformLocation, 2},
    {"_ropengl_myGlGetVertexAttribfv", (DL_FUNC) &_ropengl_myGlGetVertexAttribfv, 3},
    {"_ropengl_myGlGetVertexAttribiv", (DL_FUNC) &_ropengl_myGlGetVertexAttribiv, 3},
    {"_ropengl_myGlHint", (DL_FUNC) &_ropengl_myGlHint, 2},
    {"_ropengl_myGlIsBuffer", (DL_FUNC) &_ropengl_myGlIsBuffer, 1},
    {"_ropengl_myGlIsEnabled", (DL_FUNC) &_ropengl_myGlIsEnabled, 1},
    {"_ropengl_myGlIsFramebuffer", (DL_FUNC) &_ropengl_myGlIsFramebuffer, 1},
    {"_ropengl_myGlIsProgram", (DL_FUNC) &_ropengl_myGlIsProgram, 1},
    {"_ropengl_myGlIsRenderbuffer", (DL_FUNC) &_ropengl_myGlIsRenderbuffer, 1},
    {"_ropengl_myGlIsShader", (DL_FUNC) &_ropengl_myGlIsShader, 1},
    {"_ropengl_myGlIsTexture", (DL_FUNC) &_ropengl_myGlIsTexture, 1},
    {"_ropengl_myGlLineWidth", (DL_FUNC) &_ropengl_myGlLineWidth, 1},
    {"_ropengl_myGlLinkProgram", (DL_FUNC) &_ropengl_myGlLinkProgram, 1},
    {"_ropengl_myGlPixelStorei", (DL_FUNC) &_ropengl_myGlPixelStorei, 2},
    {"_ropengl_myGlPolygonOffset", (DL_FUNC) &_ropengl_myGlPolygonOffset, 2},
    {"_ropengl_myGlReadPixels", (DL_FUNC) &_ropengl_myGlReadPixels, 7},
    {"_ropengl_myGlReleaseShaderCompiler", (DL_FUNC) &_ropengl_myGlReleaseShaderCompiler, 0},
    {"_ropengl_myGlRenderbufferStorage", (DL_FUNC) &_ropengl_myGlRenderbufferStorage, 4},
    {"_ropengl_myGlSampleCoverage", (DL_FUNC) &_ropengl_myGlSampleCoverage, 2},
    {"_ropengl_myGlScissor", (DL_FUNC) &_ropengl_myGlScissor, 4},
    {"_ropengl_myGlStencilFunc", (DL_FUNC) &_ropengl_myGlStencilFunc, 3},
    {"_ropengl_myGlStencilFuncSeparate", (DL_FUNC) &_ropengl_myGlStencilFuncSeparate, 4},
    {"_ropengl_myGlStencilMask", (DL_FUNC) &_ropengl_myGlStencilMask, 1},
    {"_ropengl_myGlStencilMaskSeparate", (DL_FUNC) &_ropengl_myGlStencilMaskSeparate, 2},
    {"_ropengl_myGlStencilOp", (DL_FUNC) &_ropengl_myGlStencilOp, 3},
    {"_ropengl_myGlStencilOpSeparate", (DL_FUNC) &_ropengl_myGlStencilOpSeparate, 4},
    {"_ropengl_myGlTexImage2D", (DL_FUNC) &_ropengl_myGlTexImage2D, 1},
    {"_ropengl_myGlTexParameterf", (DL_FUNC) &_ropengl_myGlTexParameterf, 3},
    {"_ropengl_myGlTexParameterfv", (DL_FUNC) &_ropengl_myGlTexParameterfv, 3},
    {"_ropengl_myGlTexParameteri", (DL_FUNC) &_ropengl_myGlTexParameteri, 3},
    {"_ropengl_myGlTexParameteriv", (DL_FUNC) &_ropengl_myGlTexParameteriv, 3},
    {"_ropengl_myGlTexSubImage2D", (DL_FUNC) &_ropengl_myGlTexSubImage2D, 9},
    {"_ropengl_myGlUniform1f", (DL_FUNC) &_ropengl_myGlUniform1f, 2},
    {"_ropengl_myGlUniform1fv", (DL_FUNC) &_ropengl_myGlUniform1fv, 3},
    {"_ropengl_myGlUniform1i", (DL_FUNC) &_ropengl_myGlUniform1i, 2},
    {"_ropengl_myGlUniform1iv", (DL_FUNC) &_ropengl_myGlUniform1iv, 3},
    {"_ropengl_myGlUniform2f", (DL_FUNC) &_ropengl_myGlUniform2f, 3},
    {"_ropengl_myGlUniform2fv", (DL_FUNC) &_ropengl_myGlUniform2fv, 3},
    {"_ropengl_myGlUniform2i", (DL_FUNC) &_ropengl_myGlUniform2i, 3},
    {"_ropengl_myGlUniform2iv", (DL_FUNC) &_ropengl_myGlUniform2iv, 3},
    {"_ropengl_myGlUniform3f", (DL_FUNC) &_ropengl_myGlUniform3f, 4},
    {"_ropengl_myGlUniform3fv", (DL_FUNC) &_ropengl_myGlUniform3fv, 3},
    {"_ropengl_myGlUniform3i", (DL_FUNC) &_ropengl_myGlUniform3i, 4},
    {"_ropengl_myGlUniform3iv", (DL_FUNC) &_ropengl_myGlUniform3iv, 3},
    {"_ropengl_myGlUniform4f", (DL_FUNC) &_ropengl_myGlUniform4f, 5},
    {"_ropengl_myGlUniform4fv", (DL_FUNC) &_ropengl_myGlUniform4fv, 3},
    {"_ropengl_myGlUniform4i", (DL_FUNC) &_ropengl_myGlUniform4i, 5},
    {"_ropengl_myGlUniform4iv", (DL_FUNC) &_ropengl_myGlUniform4iv, 3},
    {"_ropengl_myGlUniformMatrix2fv", (DL_FUNC) &_ropengl_myGlUniformMatrix2fv, 4},
    {"_ropengl_myGlUniformMatrix3fv", (DL_FUNC) &_ropengl_myGlUniformMatrix3fv, 4},
    {"_ropengl_myGlUniformMatrix4fv", (DL_FUNC) &_ropengl_myGlUniformMatrix4fv, 4},
    {"_ropengl_myGlUseProgram", (DL_FUNC) &_ropengl_myGlUseProgram, 1},
    {"_ropengl_myGlValidateProgram", (DL_FUNC) &_ropengl_myGlValidateProgram, 1},
    {"_ropengl_myGlVertexAttrib1f", (DL_FUNC) &_ropengl_myGlVertexAttrib1f, 2},
    {"_ropengl_myGlVertexAttrib1fv", (DL_FUNC) &_ropengl_myGlVertexAttrib1fv, 2},
    {"_ropengl_myGlVertexAttrib2f", (DL_FUNC) &_ropengl_myGlVertexAttrib2f, 3},
    {"_ropengl_myGlVertexAttrib2fv", (DL_FUNC) &_ropengl_myGlVertexAttrib2fv, 2},
    {"_ropengl_myGlVertexAttrib3f", (DL_FUNC) &_ropengl_myGlVertexAttrib3f, 4},
    {"_ropengl_myGlVertexAttrib3fv", (DL_FUNC) &_ropengl_myGlVertexAttrib3fv, 2},
    {"_ropengl_myGlVertexAttrib4f", (DL_FUNC) &_ropengl_myGlVertexAttrib4f, 5},
    {"_ropengl_myGlVertexAttrib4fv", (DL_FUNC) &_ropengl_myGlVertexAttrib4fv, 2},
    {"_ropengl_myGlVertexAttribPointer", (DL_FUNC) &_ropengl_myGlVertexAttribPointer, 6},
    {"_ropengl_myGlViewport", (DL_FUNC) &_ropengl_myGlViewport, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_ropengl(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
